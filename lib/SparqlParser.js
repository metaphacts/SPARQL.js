/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var SparqlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,12,15,28,40,49,54,106,116,119,121,122,131,132,137,316,317,318,319,320],$V1=[2,203],$V2=[106,116,119,121,122,131,132,137,316,317,318,319,320],$V3=[1,20],$V4=[1,29],$V5=[6,90],$V6=[44,45,57],$V7=[44,57],$V8=[1,58],$V9=[1,60],$Va=[1,56],$Vb=[1,59],$Vc=[1,65],$Vd=[1,66],$Ve=[26,34,35],$Vf=[13,16,306],$Vg=[118,140,314,321],$Vh=[13,16,118,140,306],$Vi=[1,88],$Vj=[1,92],$Vk=[1,94],$Vl=[118,140,314,315,321],$Vm=[13,16,118,140,306,315],$Vn=[1,100],$Vo=[2,247],$Vp=[1,99],$Vq=[13,16,34,35,87,93,224,230,239,240,293,294,295,296,297,298,299,300,301,302,303,304,305,306],$Vr=[6,44,45,57,67,75,78,86,88,90],$Vs=[6,13,16,34,44,45,57,67,75,78,86,88,90,306],$Vt=[6,13,16,26,34,35,37,38,44,45,47,57,67,75,78,86,87,88,90,93,99,115,118,131,132,134,139,166,167,169,172,173,191,195,217,222,224,225,230,233,239,240,244,248,252,267,272,289,293,294,295,296,297,298,299,300,301,302,303,304,305,306,322,324,325,327,328,329,330,331,332,333,334],$Vu=[34,35,44,45,57],$Vv=[13,16,34,35,87,269,270,271,273,275,276,278,279,282,284,293,294,295,296,297,298,299,300,301,302,303,304,305,306,334,335,336,337,338,339],$Vw=[2,438],$Vx=[1,124],$Vy=[1,118],$Vz=[1,125],$VA=[1,126],$VB=[6,13,16,34,35,45,47,87,90,93,118,166,167,169,172,173,224,230,239,240,293,294,295,296,297,298,299,300,301,302,303,304,305,306,322],$VC=[2,306],$VD=[1,143],$VE=[1,141],$VF=[6,191],$VG=[2,323],$VH=[2,311],$VI=[44,134],$VJ=[6,47,78,86,88,90],$VK=[2,251],$VL=[1,157],$VM=[1,159],$VN=[6,47,75,78,86,88,90],$VO=[2,249],$VP=[1,165],$VQ=[1,177],$VR=[1,175],$VS=[1,186],$VT=[1,184],$VU=[1,176],$VV=[1,179],$VW=[1,182],$VX=[1,183],$VY=[1,187],$VZ=[1,188],$V_=[1,191],$V$=[1,192],$V01=[1,193],$V11=[1,194],$V21=[1,195],$V31=[1,196],$V41=[1,197],$V51=[1,198],$V61=[1,199],$V71=[1,200],$V81=[1,201],$V91=[6,67,75,78,86,88,90],$Va1=[37,38,191,244,272],$Vb1=[37,38,191,244,248,272],$Vc1=[37,38,191,244,248,252,267,272,289,300,301,302,303,304,305,328,329,330,331,332,333,334],$Vd1=[26,37,38,191,244,248,252,267,272,289,300,301,302,303,304,305,325,328,329,330,331,332,333,334],$Ve1=[1,229],$Vf1=[1,230],$Vg1=[1,232],$Vh1=[1,233],$Vi1=[1,234],$Vj1=[1,235],$Vk1=[1,237],$Vl1=[1,238],$Vm1=[2,445],$Vn1=[1,240],$Vo1=[1,241],$Vp1=[1,242],$Vq1=[1,248],$Vr1=[1,243],$Vs1=[1,244],$Vt1=[1,245],$Vu1=[1,246],$Vv1=[1,247],$Vw1=[13,16,47,87,99,293,294,295,296,297,298,299,300,301,302,303,304,305,306],$Vx1=[47,93],$Vy1=[34,38],$Vz1=[6,115,191],$VA1=[47,118],$VB1=[6,47,86,88,90],$VC1=[2,335],$VD1=[2,327],$VE1=[1,293],$VF1=[1,295],$VG1=[47,118,322],$VH1=[13,16,34,195,306],$VI1=[13,16,34,35,38,45,47,87,90,93,118,166,167,169,172,173,191,195,217,222,224,225,230,233,239,240,272,293,294,295,296,297,298,299,300,301,302,303,304,305,306,322],$VJ1=[13,16,26,34,35,37,38,45,47,87,90,93,99,118,166,167,169,172,173,191,195,217,222,224,225,230,233,239,240,244,248,252,267,272,289,293,294,295,296,297,298,299,300,301,302,303,304,305,306,322,325,328,329,330,331,332,333,334],$VK1=[13,16,26,34,35,37,38,45,47,87,90,93,99,118,166,167,169,172,173,191,195,217,222,224,225,230,233,239,240,244,248,252,267,272,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,322,325,328,329,330,331,332,333,334],$VL1=[13,16,34,35,87,217,267,269,270,271,273,275,276,278,279,282,284,293,294,295,296,297,298,299,300,301,302,303,304,305,306,328,334,335,336,337,338,339],$VM1=[1,328],$VN1=[1,329],$VO1=[1,331],$VP1=[1,330],$VQ1=[6,13,16,26,34,35,37,38,45,47,75,78,81,83,86,87,88,90,93,118,166,167,169,172,173,191,224,230,239,240,244,248,252,267,269,270,271,272,273,275,276,278,279,282,284,289,293,294,295,296,297,298,299,300,301,302,303,304,305,306,322,325,328,329,330,331,332,333,334,335,336,337,338,339],$VR1=[1,339],$VS1=[1,338],$VT1=[35,93],$VU1=[1,351],$VV1=[1,364],$VW1=[6,47,90],$VX1=[6,13,16,35,47,78,86,88,90,269,270,271,273,275,276,278,279,282,284,306,334,335,336,337,338,339],$VY1=[6,13,16,34,35,45,47,78,81,83,86,87,88,90,93,118,166,167,169,172,173,224,230,239,240,269,270,271,273,275,276,278,279,282,284,293,294,295,296,297,298,299,300,301,302,303,304,305,306,322,334,335,336,337,338,339],$VZ1=[45,47,90,118,166,167,169,172,173],$V_1=[1,383],$V$1=[1,384],$V02=[1,390],$V12=[1,389],$V22=[47,118,191,225,322],$V32=[2,369],$V42=[13,16,34,35,38,87,93,224,230,239,240,293,294,295,296,297,298,299,300,301,302,303,304,305,306],$V52=[13,16,34,35,38,45,47,87,90,93,118,166,167,169,172,173,191,224,225,230,239,240,272,293,294,295,296,297,298,299,300,301,302,303,304,305,306,322],$V62=[13,16,26,34,35,87,217,267,269,270,271,273,275,276,278,279,282,284,293,294,295,296,297,298,299,300,301,302,303,304,305,306,328,334,335,336,337,338,339],$V72=[13,16,38,47,87,99,293,294,295,296,297,298,299,300,301,302,303,304,305,306],$V82=[35,47],$V92=[2,326],$Va2=[1,443],$Vb2=[1,440],$Vc2=[1,441],$Vd2=[6,13,16,26,34,35,37,38,45,47,67,75,78,81,83,86,87,88,90,93,118,166,167,169,172,173,191,224,230,239,240,244,248,252,267,269,270,271,272,273,275,276,278,279,282,284,289,293,294,295,296,297,298,299,300,301,302,303,304,305,306,322,323,325,328,329,330,331,332,333,334,335,336,337,338,339],$Ve2=[13,16,35,195,217,222,306],$Vf2=[2,383],$Vg2=[1,461],$Vh2=[45,47,90,118,166,167,169,172,173,322],$Vi2=[13,16,34,35,195,217,222,306],$Vj2=[6,13,16,34,35,47,75,78,86,88,90,269,270,271,273,275,276,278,279,282,284,306,334,335,336,337,338,339],$Vk2=[13,16,34,35,38,45,47,87,90,93,118,166,167,169,172,173,191,195,224,225,230,239,240,272,293,294,295,296,297,298,299,300,301,302,303,304,305,306,322],$Vl2=[6,13,16,34,35,47,81,83,86,88,90,269,270,271,273,275,276,278,279,282,284,306,334,335,336,337,338,339],$Vm2=[13,16,34,35,45,47,87,90,93,118,166,167,169,172,173,224,230,239,240,293,294,295,296,297,298,299,300,301,302,303,304,305,306],$Vn2=[13,16,34,306],$Vo2=[13,16,34,35,45,47,87,90,93,118,166,167,169,172,173,224,230,239,240,293,294,295,296,297,298,299,300,301,302,303,304,305,306,322],$Vp2=[2,338],$Vq2=[45,47,90,118,166,167,169,172,173,191,225,322],$Vr2=[2,333],$Vs2=[13,16,35,195,217,306],$Vt2=[13,16,34,35,38,45,47,87,90,93,118,166,167,169,172,173,191,195,217,222,224,225,230,239,240,272,293,294,295,296,297,298,299,300,301,302,303,304,305,306,322],$Vu2=[13,16,38,87,99,293,294,295,296,297,298,299,300,301,302,303,304,305,306],$Vv2=[13,16,34,35,47,87,93,118,224,230,239,240,293,294,295,296,297,298,299,300,301,302,303,304,305,306],$Vw2=[13,16,34,35,38,87,93,224,230,239,240,293,294,295,296,297,298,299,300,301,302,303,304,305,306,324,325],$Vx2=[13,16,26,34,35,38,87,93,224,230,239,240,293,294,295,296,297,298,299,300,301,302,303,304,305,306,324,325,327,328],$Vy2=[1,604],$Vz2=[1,605],$VA2=[2,321],$VB2=[13,16,38,195,222,306];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"QueryOrUpdate":3,"Prologue":4,"QueryOrUpdate_group0":5,"EOF":6,"Prologue_repetition0":7,"Query":8,"Query_group0":9,"Query_option0":10,"BaseDecl":11,"BASE":12,"IRIREF":13,"PrefixDecl":14,"PREFIX":15,"PNAME_NS":16,"SelectQuery":17,"SelectClauseWildcard":18,"SelectQuery_repetition0":19,"WhereClause":20,"SolutionModifierNoGroup":21,"SelectClauseVars":22,"SelectQuery_repetition1":23,"SolutionModifier":24,"SelectClauseBase":25,"*":26,"SelectClauseVars_repetition_plus0":27,"SELECT":28,"SelectClauseBase_option0":29,"SubSelect":30,"SubSelect_option0":31,"SubSelect_option1":32,"SelectClauseItem":33,"VAR":34,"(":35,"SelectClauseItem_group0":36,"AS":37,")":38,"ConstructQuery":39,"CONSTRUCT":40,"ConstructTemplate":41,"ConstructQuery_repetition0":42,"ConstructQuery_repetition1":43,"WHERE":44,"{":45,"ConstructQuery_option0":46,"}":47,"DescribeQuery":48,"DESCRIBE":49,"DescribeQuery_group0":50,"DescribeQuery_repetition0":51,"DescribeQuery_option0":52,"AskQuery":53,"ASK":54,"AskQuery_repetition0":55,"DatasetClause":56,"FROM":57,"DatasetClause_option0":58,"iri":59,"WhereClause_option0":60,"GroupGraphPattern":61,"SolutionModifier_option0":62,"SolutionModifierNoGroup_option0":63,"SolutionModifierNoGroup_option1":64,"SolutionModifierNoGroup_option2":65,"GroupClause":66,"GROUP":67,"BY":68,"GroupClause_repetition_plus0":69,"GroupCondition":70,"BuiltInCall":71,"FunctionCall":72,"Expression":73,"HavingClause":74,"HAVING":75,"HavingClause_repetition_plus0":76,"OrderClause":77,"ORDER":78,"OrderClause_repetition_plus0":79,"OrderCondition":80,"ASC":81,"BrackettedExpression":82,"DESC":83,"Constraint":84,"LimitOffsetClauses":85,"LIMIT":86,"INTEGER":87,"OFFSET":88,"ValuesClause":89,"VALUES":90,"InlineData":91,"InlineData_repetition0":92,"NIL":93,"InlineData_repetition1":94,"InlineData_repetition_plus2":95,"InlineData_repetition3":96,"DataBlockValue":97,"Literal":98,"UNDEF":99,"DataBlockValueList":100,"DataBlockValueList_repetition_plus0":101,"Update":102,"Update_repetition0":103,"Update1":104,"Update_option0":105,"LOAD":106,"Update1_option0":107,"Update1_option1":108,"Update1_group0":109,"Update1_option2":110,"GraphRefAll":111,"Update1_group1":112,"Update1_option3":113,"GraphOrDefault":114,"TO":115,"CREATE":116,"Update1_option4":117,"GRAPH":118,"INSERTDATA":119,"QuadPattern":120,"DELETEDATA":121,"DELETEWHERE":122,"Update1_option5":123,"InsertClause":124,"Update1_option6":125,"Update1_repetition0":126,"Update1_option7":127,"DeleteClause":128,"Update1_option8":129,"Update1_repetition1":130,"DELETE":131,"INSERT":132,"UsingClause":133,"USING":134,"UsingClause_option0":135,"WithClause":136,"WITH":137,"IntoGraphClause":138,"INTO":139,"DEFAULT":140,"GraphOrDefault_option0":141,"GraphRefAll_group0":142,"QuadPattern_option0":143,"QuadPattern_repetition0":144,"QuadsNotTriples":145,"QuadsNotTriples_group0":146,"QuadsNotTriples_option0":147,"QuadsNotTriples_option1":148,"QuadsNotTriples_option2":149,"TriplesTemplate":150,"TriplesTemplate_repetition0":151,"TriplesSameSubject":152,"TriplesTemplate_option0":153,"GroupGraphPatternSub":154,"GroupGraphPatternSub_option0":155,"GroupGraphPatternSub_repetition0":156,"GroupGraphPatternSubTail":157,"GraphPatternNotTriples":158,"GroupGraphPatternSubTail_option0":159,"GroupGraphPatternSubTail_option1":160,"TriplesBlock":161,"TriplesBlock_repetition0":162,"TriplesSameSubjectPath":163,"TriplesBlock_option0":164,"GraphPatternNotTriples_repetition0":165,"OPTIONAL":166,"MINUS":167,"GraphPatternNotTriples_group0":168,"SERVICE":169,"GraphPatternNotTriples_option0":170,"GraphPatternNotTriples_group1":171,"FILTER":172,"BIND":173,"GraphPatternNotTriples_group2":174,"FunctionCall_option0":175,"FunctionCall_repetition0":176,"ExpressionList":177,"ExpressionList_repetition0":178,"ConstructTemplate_option0":179,"ConstructTriples":180,"ConstructTriples_repetition0":181,"ConstructTriples_option0":182,"TriplesSameSubject_group0":183,"PropertyListNotEmpty":184,"TriplesNode":185,"PropertyList":186,"PropertyList_option0":187,"VerbObjectList":188,"PropertyListNotEmpty_repetition0":189,"SemiOptionalVerbObjectList":190,";":191,"SemiOptionalVerbObjectList_option0":192,"Verb":193,"ObjectList":194,"a":195,"ObjectList_repetition0":196,"GraphNode":197,"TriplesSameSubjectPath_group0":198,"PropertyListPathNotEmpty":199,"TriplesNodePath":200,"TriplesSameSubjectPath_option0":201,"PropertyListPathNotEmpty_group0":202,"PropertyListPathNotEmpty_repetition0":203,"GraphNodePath":204,"PropertyListPathNotEmpty_repetition1":205,"PropertyListPathNotEmptyTail":206,"PropertyListPathNotEmptyTail_group0":207,"Path":208,"Path_repetition0":209,"PathSequence":210,"PathSequence_repetition0":211,"PathEltOrInverse":212,"PathElt":213,"PathPrimary":214,"PathElt_option0":215,"PathEltOrInverse_option0":216,"!":217,"PathNegatedPropertySet":218,"PathOneInPropertySet":219,"PathNegatedPropertySet_repetition0":220,"PathNegatedPropertySet_option0":221,"^":222,"TriplesNode_repetition_plus0":223,"[":224,"]":225,"TriplesNodePath_repetition_plus0":226,"GraphNode_group0":227,"GraphNodePath_group0":228,"VarTriple":229,"<<":230,"VarTriple_group0":231,"VarTriple_group1":232,">>":233,"ConstTriple":234,"ConstTriple_group0":235,"ConstTriple_group1":236,"VarOrTerm":237,"Term":238,"BLANK_NODE_LABEL":239,"ANON":240,"ConditionalAndExpression":241,"Expression_repetition0":242,"ExpressionTail":243,"||":244,"RelationalExpression":245,"ConditionalAndExpression_repetition0":246,"ConditionalAndExpressionTail":247,"&&":248,"AdditiveExpression":249,"RelationalExpression_group0":250,"RelationalExpression_option0":251,"IN":252,"MultiplicativeExpression":253,"AdditiveExpression_repetition0":254,"AdditiveExpressionTail":255,"AdditiveExpressionTail_group0":256,"NumericLiteralPositive":257,"AdditiveExpressionTail_repetition0":258,"NumericLiteralNegative":259,"AdditiveExpressionTail_repetition1":260,"UnaryExpression":261,"MultiplicativeExpression_repetition0":262,"MultiplicativeExpressionTail":263,"MultiplicativeExpressionTail_group0":264,"UnaryExpression_option0":265,"PrimaryExpression":266,"-":267,"Aggregate":268,"FUNC_ARITY0":269,"FUNC_ARITY1":270,"FUNC_ARITY2":271,",":272,"IF":273,"BuiltInCall_group0":274,"BOUND":275,"BNODE":276,"BuiltInCall_option0":277,"EXISTS":278,"COUNT":279,"Aggregate_option0":280,"Aggregate_group0":281,"FUNC_AGGREGATE":282,"Aggregate_option1":283,"GROUP_CONCAT":284,"Aggregate_option2":285,"Aggregate_option3":286,"GroupConcatSeparator":287,"SEPARATOR":288,"=":289,"String":290,"LANGTAG":291,"^^":292,"DECIMAL":293,"DOUBLE":294,"BOOLEAN":295,"STRING_LITERAL1":296,"STRING_LITERAL2":297,"STRING_LITERAL_LONG1":298,"STRING_LITERAL_LONG2":299,"INTEGER_POSITIVE":300,"DECIMAL_POSITIVE":301,"DOUBLE_POSITIVE":302,"INTEGER_NEGATIVE":303,"DECIMAL_NEGATIVE":304,"DOUBLE_NEGATIVE":305,"PNAME_LN":306,"QueryOrUpdate_group0_option0":307,"Prologue_repetition0_group0":308,"SelectClauseBase_option0_group0":309,"DISTINCT":310,"REDUCED":311,"DescribeQuery_group0_repetition_plus0_group0":312,"DescribeQuery_group0_repetition_plus0":313,"NAMED":314,"SILENT":315,"CLEAR":316,"DROP":317,"ADD":318,"MOVE":319,"COPY":320,"ALL":321,".":322,"UNION":323,"|":324,"/":325,"PathElt_option0_group0":326,"?":327,"+":328,"!=":329,"<":330,">":331,"<=":332,">=":333,"NOT":334,"CONCAT":335,"COALESCE":336,"SUBSTR":337,"REGEX":338,"REPLACE":339,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",12:"BASE",13:"IRIREF",15:"PREFIX",16:"PNAME_NS",26:"*",28:"SELECT",34:"VAR",35:"(",37:"AS",38:")",40:"CONSTRUCT",44:"WHERE",45:"{",47:"}",49:"DESCRIBE",54:"ASK",57:"FROM",67:"GROUP",68:"BY",75:"HAVING",78:"ORDER",81:"ASC",83:"DESC",86:"LIMIT",87:"INTEGER",88:"OFFSET",90:"VALUES",93:"NIL",99:"UNDEF",106:"LOAD",115:"TO",116:"CREATE",118:"GRAPH",119:"INSERTDATA",121:"DELETEDATA",122:"DELETEWHERE",131:"DELETE",132:"INSERT",134:"USING",137:"WITH",139:"INTO",140:"DEFAULT",166:"OPTIONAL",167:"MINUS",169:"SERVICE",172:"FILTER",173:"BIND",191:";",195:"a",217:"!",222:"^",224:"[",225:"]",230:"<<",233:">>",239:"BLANK_NODE_LABEL",240:"ANON",244:"||",248:"&&",252:"IN",267:"-",269:"FUNC_ARITY0",270:"FUNC_ARITY1",271:"FUNC_ARITY2",272:",",273:"IF",275:"BOUND",276:"BNODE",278:"EXISTS",279:"COUNT",282:"FUNC_AGGREGATE",284:"GROUP_CONCAT",288:"SEPARATOR",289:"=",291:"LANGTAG",292:"^^",293:"DECIMAL",294:"DOUBLE",295:"BOOLEAN",296:"STRING_LITERAL1",297:"STRING_LITERAL2",298:"STRING_LITERAL_LONG1",299:"STRING_LITERAL_LONG2",300:"INTEGER_POSITIVE",301:"DECIMAL_POSITIVE",302:"DOUBLE_POSITIVE",303:"INTEGER_NEGATIVE",304:"DECIMAL_NEGATIVE",305:"DOUBLE_NEGATIVE",306:"PNAME_LN",310:"DISTINCT",311:"REDUCED",314:"NAMED",315:"SILENT",316:"CLEAR",317:"DROP",318:"ADD",319:"MOVE",320:"COPY",321:"ALL",322:".",323:"UNION",324:"|",325:"/",327:"?",328:"+",329:"!=",330:"<",331:">",332:"<=",333:">=",334:"NOT",335:"CONCAT",336:"COALESCE",337:"SUBSTR",338:"REGEX",339:"REPLACE"},
productions_: [0,[3,3],[4,1],[8,2],[11,2],[14,3],[17,4],[17,4],[18,2],[22,2],[25,2],[30,4],[30,4],[33,1],[33,5],[39,5],[39,7],[48,5],[53,4],[56,3],[20,2],[24,2],[21,3],[66,3],[70,1],[70,1],[70,3],[70,5],[70,1],[74,2],[77,3],[80,2],[80,2],[80,1],[80,1],[85,2],[85,2],[85,4],[85,4],[89,2],[91,4],[91,4],[91,6],[97,1],[97,1],[97,1],[100,3],[102,3],[104,4],[104,3],[104,5],[104,4],[104,2],[104,2],[104,2],[104,6],[104,6],[128,2],[124,2],[133,3],[136,2],[138,3],[114,1],[114,2],[111,2],[111,1],[120,4],[145,7],[150,3],[61,3],[61,3],[154,2],[157,3],[161,3],[158,2],[158,2],[158,2],[158,3],[158,4],[158,2],[158,6],[158,1],[84,1],[84,1],[84,1],[72,2],[72,6],[177,1],[177,4],[41,3],[180,3],[152,2],[152,2],[186,1],[184,2],[190,2],[188,2],[193,1],[193,1],[193,1],[194,2],[163,2],[163,2],[199,4],[206,1],[206,3],[208,2],[210,2],[213,2],[212,2],[214,1],[214,1],[214,2],[214,3],[218,1],[218,1],[218,4],[219,1],[219,1],[219,2],[219,2],[185,3],[185,3],[200,3],[200,3],[197,1],[197,1],[204,1],[204,1],[229,5],[234,5],[237,1],[237,1],[238,1],[238,1],[238,1],[238,1],[238,1],[73,2],[243,2],[241,2],[247,2],[245,1],[245,3],[245,4],[249,2],[255,2],[255,2],[255,2],[253,2],[263,2],[261,2],[261,2],[261,2],[266,1],[266,1],[266,1],[266,1],[266,1],[266,1],[82,3],[71,1],[71,2],[71,4],[71,6],[71,8],[71,2],[71,4],[71,2],[71,4],[71,3],[268,5],[268,5],[268,6],[287,4],[98,1],[98,2],[98,3],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[290,1],[290,1],[290,1],[290,1],[257,1],[257,1],[257,1],[259,1],[259,1],[259,1],[59,1],[59,1],[59,1],[307,0],[307,1],[5,1],[5,1],[308,1],[308,1],[7,0],[7,2],[9,1],[9,1],[9,1],[9,1],[10,0],[10,1],[19,0],[19,2],[23,0],[23,2],[27,1],[27,2],[309,1],[309,1],[29,0],[29,1],[31,0],[31,1],[32,0],[32,1],[36,1],[36,1],[42,0],[42,2],[43,0],[43,2],[46,0],[46,1],[312,1],[312,1],[313,1],[313,2],[50,1],[50,1],[51,0],[51,2],[52,0],[52,1],[55,0],[55,2],[58,0],[58,1],[60,0],[60,1],[62,0],[62,1],[63,0],[63,1],[64,0],[64,1],[65,0],[65,1],[69,1],[69,2],[76,1],[76,2],[79,1],[79,2],[92,0],[92,2],[94,0],[94,2],[95,1],[95,2],[96,0],[96,2],[101,1],[101,2],[103,0],[103,4],[105,0],[105,2],[107,0],[107,1],[108,0],[108,1],[109,1],[109,1],[110,0],[110,1],[112,1],[112,1],[112,1],[113,0],[113,1],[117,0],[117,1],[123,0],[123,1],[125,0],[125,1],[126,0],[126,2],[127,0],[127,1],[129,0],[129,1],[130,0],[130,2],[135,0],[135,1],[141,0],[141,1],[142,1],[142,1],[142,1],[143,0],[143,1],[144,0],[144,2],[146,1],[146,1],[147,0],[147,1],[148,0],[148,1],[149,0],[149,1],[151,0],[151,3],[153,0],[153,1],[155,0],[155,1],[156,0],[156,2],[159,0],[159,1],[160,0],[160,1],[162,0],[162,3],[164,0],[164,1],[165,0],[165,3],[168,1],[168,1],[170,0],[170,1],[171,1],[171,1],[174,1],[174,1],[175,0],[175,1],[176,0],[176,3],[178,0],[178,3],[179,0],[179,1],[181,0],[181,3],[182,0],[182,1],[183,1],[183,1],[187,0],[187,1],[189,0],[189,2],[192,0],[192,1],[196,0],[196,3],[198,1],[198,1],[201,0],[201,1],[202,1],[202,1],[203,0],[203,3],[205,0],[205,2],[207,1],[207,1],[209,0],[209,3],[211,0],[211,3],[326,1],[326,1],[326,1],[215,0],[215,1],[216,0],[216,1],[220,0],[220,3],[221,0],[221,1],[223,1],[223,2],[226,1],[226,2],[227,1],[227,1],[228,1],[228,1],[231,1],[231,1],[232,1],[232,1],[235,1],[235,1],[236,1],[236,1],[242,0],[242,2],[246,0],[246,2],[250,1],[250,1],[250,1],[250,1],[250,1],[250,1],[251,0],[251,1],[254,0],[254,2],[256,1],[256,1],[258,0],[258,2],[260,0],[260,2],[262,0],[262,2],[264,1],[264,1],[265,0],[265,1],[274,1],[274,1],[274,1],[274,1],[274,1],[277,0],[277,1],[280,0],[280,1],[281,1],[281,1],[283,0],[283,1],[285,0],[285,1],[286,0],[286,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      $$[$0-1] = $$[$0-1] || {};
      if (Parser.base)
        $$[$0-1].base = Parser.base;
      Parser.base = base = basePath = baseRoot = '';
      $$[$0-1].prefixes = Parser.prefixes;
      Parser.prefixes = null;
      return $$[$0-1];
    
break;
case 3:
this.$ = extend($$[$0-1], $$[$0], { type: 'query' });
break;
case 4:

      Parser.base = resolveIRI($$[$0])
      base = basePath = baseRoot = '';
    
break;
case 5:

      if (!Parser.prefixes) Parser.prefixes = {};
      $$[$0-1] = $$[$0-1].substr(0, $$[$0-1].length - 1);
      $$[$0] = resolveIRI($$[$0]);
      Parser.prefixes[$$[$0-1]] = $$[$0];
    
break;
case 6:
this.$ = extend($$[$0-3], groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 7:

      // Check for projection of ungrouped variable
      const counts = flatten($$[$0-3].variables.map(vars => getAggregatesOfExpression(vars.expression)))
        .some(agg => agg.aggregation === "count");
      if (counts || $$[$0].group) {
        for (const selectVar of $$[$0-3].variables) {
          if (selectVar.termType === "Variable") {
            if (!$$[$0].group || !$$[$0].group.map(groupVar => getExpressionId(groupVar)).includes(getExpressionId(selectVar))) {
              throw Error("Projection of ungrouped variable (?" + getExpressionId(selectVar) + ")");
            }
          } else if (getAggregatesOfExpression(selectVar.expression).length === 0) {
            const usedVars = getVariablesFromOperation(selectVar.expression);
            for (const usedVar of usedVars) {
              if (!$$[$0].group.map(groupVar => getExpressionId(groupVar)).includes(getExpressionId(usedVar))) {
                throw Error("Use of ungrouped variable in projection of operation (?" + getExpressionId(usedVar) + ")");
              }
            }
          }
        }
      }
      this.$ = extend($$[$0-3], groupDatasets($$[$0-2]), $$[$0-1], $$[$0])
    
break;
case 8:
this.$ = extend($$[$0-1], {variables: [new Wildcard()]});
break;
case 9:
this.$ = extend($$[$0-1], { variables: $$[$0] });
break;
case 10:
this.$ = extend({ queryType: 'SELECT'}, $$[$0] && ($$[$0-1] = lowercase($$[$0]), $$[$0] = {}, $$[$0][$$[$0-1]] = true, $$[$0]));
break;
case 11: case 12:
this.$ = extend($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], { type: 'query' });
break;
case 13: case 97: case 131: case 159:
this.$ = toVar($$[$0]);
break;
case 14: case 27:
this.$ = expression($$[$0-3], { variable: toVar($$[$0-1]) });
break;
case 15:
this.$ = extend({ queryType: 'CONSTRUCT', template: $$[$0-3] }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 16:
this.$ = extend({ queryType: 'CONSTRUCT', template: $$[$0-2] = ($$[$0-2] ? $$[$0-2].triples : []) }, groupDatasets($$[$0-5]), { where: [ { type: 'bgp', triples: appendAllTo([], $$[$0-2]) } ] }, $$[$0]);
break;
case 17:
this.$ = extend({ queryType: 'DESCRIBE', variables: $$[$0-3] === '*' ? [new Wildcard()] : $$[$0-3].map(toVar) }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 18:
this.$ = extend({ queryType: 'ASK' }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 19: case 59:
this.$ = { iri: $$[$0], named: !!$$[$0-1] };
break;
case 20:
this.$ = { where: $$[$0].patterns };
break;
case 21:
this.$ = extend($$[$0-1], $$[$0]);
break;
case 22:
this.$ = extend($$[$0-2], $$[$0-1], $$[$0]);
break;
case 23:
this.$ = { group: $$[$0] };
break;
case 24: case 25: case 31: case 33:
this.$ = expression($$[$0]);
break;
case 26:
this.$ = expression($$[$0-1]);
break;
case 28: case 34:
this.$ = expression(toVar($$[$0]));
break;
case 29:
this.$ = { having: $$[$0] };
break;
case 30:
this.$ = { order: $$[$0] };
break;
case 32:
this.$ = expression($$[$0], { descending: true });
break;
case 35:
this.$ = { limit:  toInt($$[$0]) };
break;
case 36:
this.$ = { offset: toInt($$[$0]) };
break;
case 37:
this.$ = { limit: toInt($$[$0-2]), offset: toInt($$[$0]) };
break;
case 38:
this.$ = { limit: toInt($$[$0]), offset: toInt($$[$0-2]) };
break;
case 39:
this.$ = { type: 'values', values: $$[$0] };
break;
case 40:

      this.$ = $$[$0-1].map(function(v) { var o = {}; o[$$[$0-3]] = v; return o; })
    
break;
case 41:

      this.$ = $$[$0-1].map(function() { return {}; })
    
break;
case 42:

      var length = $$[$0-4].length;
      $$[$0-4] = $$[$0-4].map(toVar);
      this.$ = $$[$0-1].map(function (values) {
        if (values.length !== length)
          throw Error('Inconsistent VALUES length');
        var valuesObject = {};
        for(var i = 0; i<length; i++)
          valuesObject['?' + $$[$0-4][i].value] = values[i];
        return valuesObject;
      });
    
break;
case 45:
this.$ = undefined;
break;
case 46: case 89: case 113: case 160:
this.$ = $$[$0-1];
break;
case 47:
this.$ = { type: 'update', updates: appendTo($$[$0-2], $$[$0-1]) };
break;
case 48:
this.$ = extend({ type: 'load', silent: !!$$[$0-2], source: $$[$0-1] }, $$[$0] && { destination: $$[$0] });
break;
case 49:
this.$ = { type: lowercase($$[$0-2]), silent: !!$$[$0-1], graph: $$[$0] };
break;
case 50:
this.$ = { type: lowercase($$[$0-4]), silent: !!$$[$0-3], source: $$[$0-2], destination: $$[$0] };
break;
case 51:
this.$ = { type: 'create', silent: !!$$[$0-2], graph: { type: 'graph', name: $$[$0] } };
break;
case 52:
this.$ = { updateType: 'insert',      insert: $$[$0] };
break;
case 53:
this.$ = { updateType: 'delete',      delete: $$[$0] };
break;
case 54:
this.$ = { updateType: 'deletewhere', delete: $$[$0] };
break;
case 55:
this.$ = extend({ updateType: 'insertdelete' }, $$[$0-5], { insert: $$[$0-4] || [] }, { delete: $$[$0-3] || [] }, groupDatasets($$[$0-2], 'using'), { where: $$[$0].patterns });
break;
case 56:
this.$ = extend({ updateType: 'insertdelete' }, $$[$0-5], { delete: $$[$0-4] || [] }, { insert: $$[$0-3] || [] }, groupDatasets($$[$0-2], 'using'), { where: $$[$0].patterns });
break;
case 57: case 58: case 61: case 151: case 174:
this.$ = $$[$0];
break;
case 60:
this.$ = { graph: $$[$0] };
break;
case 62:
this.$ = { type: 'graph', default: true };
break;
case 63: case 64:
this.$ = { type: 'graph', name: $$[$0] };
break;
case 65:
 this.$ = {}; this.$[lowercase($$[$0])] = true; 
break;
case 66:
this.$ = $$[$0-2] ? unionAll($$[$0-1], [$$[$0-2]]) : unionAll($$[$0-1]);
break;
case 67:

      var graph = extend($$[$0-3] || { triples: [] }, { type: 'graph', name: toVar($$[$0-5]) });
      this.$ = $$[$0] ? [graph, $$[$0]] : [graph];
    
break;
case 68: case 73:
this.$ = { type: 'bgp', triples: unionAll($$[$0-2], [$$[$0-1]]) };
break;
case 69:
this.$ = { type: 'group', patterns: [ $$[$0-1] ] };
break;
case 70:
this.$ = { type: 'group', patterns: $$[$0-1] };
break;
case 71:
this.$ = $$[$0-1] ? unionAll([$$[$0-1]], $$[$0]) : unionAll($$[$0]);
break;
case 72:
this.$ = $$[$0] ? [$$[$0-2], $$[$0]] : $$[$0-2];
break;
case 74:

      if ($$[$0-1].length)
        this.$ = { type: 'union', patterns: unionAll($$[$0-1].map(degroupSingle), [degroupSingle($$[$0])]) };
      else
        this.$ = $$[$0];
    
break;
case 75:
this.$ = extend($$[$0], { type: 'optional' });
break;
case 76:
this.$ = extend($$[$0], { type: 'minus' });
break;
case 77:
this.$ = extend($$[$0], { type: 'graph', name: toVar($$[$0-1]) });
break;
case 78:
this.$ = extend($$[$0], { type: 'service', name: toVar($$[$0-1]), silent: !!$$[$0-2] });
break;
case 79:
this.$ = { type: 'filter', expression: $$[$0] };
break;
case 80:
this.$ = { type: 'bind', variable: toVar($$[$0-1]), expression: $$[$0-3] };
break;
case 85:
this.$ = { type: 'functionCall', function: $$[$0-1], args: [] };
break;
case 86:
this.$ = { type: 'functionCall', function: $$[$0-5], args: appendTo($$[$0-2], $$[$0-1]), distinct: !!$$[$0-3] };
break;
case 87: case 104: case 115: case 203: case 211: case 213: case 227: case 229: case 239: case 243: case 263: case 265: case 269: case 273: case 296: case 302: case 313: case 323: case 329: case 335: case 339: case 351: case 353: case 357: case 365: case 369: case 377: case 379: case 383: case 385: case 394: case 414: case 416: case 426: case 430: case 432: case 434:
this.$ = [];
break;
case 88:
this.$ = appendTo($$[$0-2], $$[$0-1]);
break;
case 90:
this.$ = unionAll($$[$0-2], [$$[$0-1]]);
break;
case 91: case 101:
this.$ = $$[$0].map(function (t) { return extend(triple($$[$0-1]), t); });
break;
case 92:
this.$ = appendAllTo($$[$0].map(function (t) { return extend(triple($$[$0-1].entity), t); }), $$[$0-1].triples) /* the subject is a blank node, possibly with more triples */;
break;
case 94:
this.$ = unionAll([$$[$0-1]], $$[$0]);
break;
case 95:
this.$ = unionAll($$[$0]);
break;
case 96:
this.$ = objectListToTriples($$[$0-1], $$[$0]);
break;
case 99: case 111: case 118:
this.$ = Parser.factory.namedNode(RDF_TYPE);
break;
case 100:
this.$ = appendTo($$[$0-1], $$[$0]);
break;
case 102:
this.$ = !$$[$0] ? $$[$0-1].triples : appendAllTo($$[$0].map(function (t) { return extend(triple($$[$0-1].entity), t); }), $$[$0-1].triples) /* the subject is a blank node, possibly with more triples */;
break;
case 103:
this.$ = objectListToTriples(toVar($$[$0-3]), appendTo($$[$0-2], $$[$0-1]), $$[$0]);
break;
case 105:
this.$ = objectListToTriples(toVar($$[$0-1]), $$[$0]);
break;
case 106:
this.$ = $$[$0-1].length ? path('|',appendTo($$[$0-1], $$[$0])) : $$[$0];
break;
case 107:
this.$ = $$[$0-1].length ? path('/', appendTo($$[$0-1], $$[$0])) : $$[$0];
break;
case 108:
this.$ = $$[$0] ? path($$[$0], [$$[$0-1]]) : $$[$0-1];
break;
case 109:
this.$ = $$[$0-1] ? path($$[$0-1], [$$[$0]]) : $$[$0];;
break;
case 112: case 119:
this.$ = path($$[$0-1], [$$[$0]]);
break;
case 116:
this.$ = path('|', appendTo($$[$0-2], $$[$0-1]));
break;
case 120:
this.$ = path($$[$0-1], [Parser.factory.namedNode(RDF_TYPE)]);
break;
case 121: case 123:
this.$ = createList($$[$0-1]);
break;
case 122: case 124:
this.$ = createAnonymousObject($$[$0-1]);
break;
case 125:
this.$ = { entity: $$[$0], triples: [] } /* for consistency with TriplesNode */;
break;
case 127:
this.$ = { entity: $$[$0], triples: [] } /* for consistency with TriplesNodePath */;
break;
case 129: case 130:
this.$ = allowsRdfStar(Parser.factory.quad($$[$0-3], $$[$0-2], $$[$0-1]));
break;
case 135:
this.$ = blank($$[$0].replace(/^(_:)/,''));;
break;
case 136:
this.$ = blank();
break;
case 137:
this.$ = Parser.factory.namedNode(RDF_NIL);
break;
case 138: case 140: case 145: case 149:
this.$ = createOperationTree($$[$0-1], $$[$0]);
break;
case 139:
this.$ = ['||', $$[$0]];
break;
case 141:
this.$ = ['&&', $$[$0]];
break;
case 143:
this.$ = operation($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 144:
this.$ = operation($$[$0-2] ? 'notin' : 'in', [$$[$0-3], $$[$0]]);
break;
case 146: case 150:
this.$ = [$$[$0-1], $$[$0]];
break;
case 147:
this.$ = ['+', createOperationTree($$[$0-1], $$[$0])];
break;
case 148:

      var negatedLiteral = createTypedLiteral($$[$0-1].value.replace('-', ''), $$[$0-1].datatype);
      this.$ = ['-', createOperationTree(negatedLiteral, $$[$0])];
    
break;
case 152:
this.$ = operation($$[$0-1], [$$[$0]]);
break;
case 153:
this.$ = operation('UMINUS', [$$[$0]]);
break;
case 162:
this.$ = operation(lowercase($$[$0-1]));
break;
case 163:
this.$ = operation(lowercase($$[$0-3]), [$$[$0-1]]);
break;
case 164:
this.$ = operation(lowercase($$[$0-5]), [$$[$0-3], $$[$0-1]]);
break;
case 165:
this.$ = operation(lowercase($$[$0-7]), [$$[$0-5], $$[$0-3], $$[$0-1]]);
break;
case 166:
this.$ = operation(lowercase($$[$0-1]), $$[$0]);
break;
case 167:
this.$ = operation('bound', [toVar($$[$0-1])]);
break;
case 168:
this.$ = operation($$[$0-1], []);
break;
case 169:
this.$ = operation($$[$0-3], [$$[$0-1]]);
break;
case 170:
this.$ = operation($$[$0-2] ? 'notexists' :'exists', [degroupSingle($$[$0])]);
break;
case 171: case 172:
this.$ = expression($$[$0-1], { type: 'aggregate', aggregation: lowercase($$[$0-4]), distinct: !!$$[$0-2] });
break;
case 173:
this.$ = expression($$[$0-2], { type: 'aggregate', aggregation: lowercase($$[$0-5]), distinct: !!$$[$0-3], separator: $$[$0-1] || ' ' });
break;
case 175:
this.$ = createTypedLiteral($$[$0]);
break;
case 176:
this.$ = createLangLiteral($$[$0-1], lowercase($$[$0].substr(1)));
break;
case 177:
this.$ = createTypedLiteral($$[$0-2], $$[$0]);
break;
case 178: case 191:
this.$ = createTypedLiteral($$[$0], XSD_INTEGER);
break;
case 179: case 192:
this.$ = createTypedLiteral($$[$0], XSD_DECIMAL);
break;
case 180: case 193:
this.$ = createTypedLiteral(lowercase($$[$0]), XSD_DOUBLE);
break;
case 183:
this.$ = createTypedLiteral($$[$0], XSD_BOOLEAN);
break;
case 184: case 185:
this.$ = unescapeString($$[$0], 1);
break;
case 186: case 187:
this.$ = unescapeString($$[$0], 3);
break;
case 188:
this.$ = createTypedLiteral($$[$0].substr(1), XSD_INTEGER);
break;
case 189:
this.$ = createTypedLiteral($$[$0].substr(1), XSD_DECIMAL);
break;
case 190:
this.$ = createTypedLiteral($$[$0].substr(1).toLowerCase(), XSD_DOUBLE);
break;
case 194:
this.$ = Parser.factory.namedNode(resolveIRI($$[$0]));
break;
case 195:

      var namePos = $$[$0].indexOf(':'),
          prefix = $$[$0].substr(0, namePos),
          expansion = Parser.prefixes[prefix];
      if (!expansion) throw new Error('Unknown prefix: ' + prefix);
      var uriString = resolveIRI(expansion + $$[$0].substr(namePos + 1));
      this.$ = Parser.factory.namedNode(uriString);
    
break;
case 196:

      $$[$0] = $$[$0].substr(0, $$[$0].length - 1);
      if (!($$[$0] in Parser.prefixes)) throw new Error('Unknown prefix: ' + $$[$0]);
      var uriString = resolveIRI(Parser.prefixes[$$[$0]]);
      this.$ = Parser.factory.namedNode(uriString);
    
break;
case 204: case 212: case 214: case 216: case 228: case 230: case 236: case 240: case 244: case 258: case 260: case 262: case 264: case 266: case 268: case 270: case 272: case 297: case 303: case 314: case 330: case 366: case 380: case 399: case 401: case 415: case 417: case 427: case 431: case 433: case 435:
$$[$0-1].push($$[$0]);
break;
case 215: case 235: case 257: case 259: case 261: case 267: case 271: case 398: case 400:
this.$ = [$$[$0]];
break;
case 274:
$$[$0-3].push($$[$0-2]);
break;
case 324: case 336: case 340: case 352: case 354: case 358: case 370: case 378: case 384: case 386: case 395:
$$[$0-2].push($$[$0-1]);
break;
}
},
table: [o($V0,$V1,{3:1,4:2,7:3}),{1:[3]},o($V2,[2,273],{5:4,8:5,307:6,9:7,102:8,17:9,39:10,48:11,53:12,103:13,18:14,22:15,25:19,6:[2,197],28:$V3,40:[1,16],49:[1,17],54:[1,18]}),o([6,28,40,49,54,106,116,119,121,122,131,132,137,316,317,318,319,320],[2,2],{308:21,11:22,14:23,12:[1,24],15:[1,25]}),{6:[1,26]},{6:[2,199]},{6:[2,200]},{6:[2,209],10:27,89:28,90:$V4},{6:[2,198]},o($V5,[2,205]),o($V5,[2,206]),o($V5,[2,207]),o($V5,[2,208]),{104:30,106:[1,31],109:32,112:33,116:[1,34],119:[1,35],121:[1,36],122:[1,37],123:38,127:39,131:[2,298],132:[2,292],136:45,137:[1,46],316:[1,40],317:[1,41],318:[1,42],319:[1,43],320:[1,44]},o($V6,[2,211],{19:47}),o($V6,[2,213],{23:48}),o($V7,[2,229],{41:49,43:50,45:[1,51]}),{13:$V8,16:$V9,26:[1,54],34:$Va,50:52,59:57,306:$Vb,312:55,313:53},o($V6,[2,243],{55:61}),{26:[1,62],27:63,33:64,34:$Vc,35:$Vd},o($Ve,[2,219],{29:67,309:68,310:[1,69],311:[1,70]}),o($V0,[2,204]),o($V0,[2,201]),o($V0,[2,202]),{13:[1,71]},{16:[1,72]},{1:[2,1]},{6:[2,3]},{6:[2,210]},{34:[1,74],35:[1,76],91:73,93:[1,75]},{6:[2,275],105:77,191:[1,78]},o($Vf,[2,277],{107:79,315:[1,80]}),o($Vg,[2,283],{110:81,315:[1,82]}),o($Vh,[2,288],{113:83,315:[1,84]}),{117:85,118:[2,290],315:[1,86]},{45:$Vi,120:87},{45:$Vi,120:89},{45:$Vi,120:90},{124:91,132:$Vj},{128:93,131:$Vk},o($Vl,[2,281]),o($Vl,[2,282]),o($Vm,[2,285]),o($Vm,[2,286]),o($Vm,[2,287]),{131:[2,299],132:[2,293]},{13:$V8,16:$V9,59:95,306:$Vb},{20:96,44:$Vn,45:$Vo,56:97,57:$Vp,60:98},{20:101,44:$Vn,45:$Vo,56:102,57:$Vp,60:98},o($V6,[2,227],{42:103}),{44:[1,104],56:105,57:$Vp},o($Vq,[2,357],{179:106,180:107,181:108,47:[2,355]}),o($Vr,[2,239],{51:109}),o($Vr,[2,237],{59:57,312:110,13:$V8,16:$V9,34:$Va,306:$Vb}),o($Vr,[2,238]),o($Vs,[2,235]),o($Vs,[2,233]),o($Vs,[2,234]),o($Vt,[2,194]),o($Vt,[2,195]),o($Vt,[2,196]),{20:111,44:$Vn,45:$Vo,56:112,57:$Vp,60:98},o($V6,[2,8]),o($V6,[2,9],{33:113,34:$Vc,35:$Vd}),o($Vu,[2,215]),o($Vu,[2,13]),o($Vv,$Vw,{36:114,73:115,234:116,241:117,245:119,249:120,253:121,261:122,265:123,217:$Vx,230:$Vy,267:$Vz,328:$VA}),o($Ve,[2,10]),o($Ve,[2,220]),o($Ve,[2,217]),o($Ve,[2,218]),o($V0,[2,4]),{13:[1,127]},o($VB,[2,39]),{45:[1,128]},{45:[1,129]},{34:[1,131],95:130},{6:[2,47]},o($V0,$V1,{7:3,4:132}),{13:$V8,16:$V9,59:133,306:$Vb},o($Vf,[2,278]),{111:134,118:[1,135],140:[1,137],142:136,314:[1,138],321:[1,139]},o($Vg,[2,284]),o($Vf,$VC,{114:140,141:142,118:$VD,140:$VE}),o($Vh,[2,289]),{118:[1,144]},{118:[2,291]},o($VF,[2,52]),o($Vq,$VG,{143:145,150:146,151:147,47:$VH,118:$VH}),o($VF,[2,53]),o($VF,[2,54]),o($VI,[2,294],{125:148,128:149,131:$Vk}),{45:$Vi,120:150},o($VI,[2,300],{129:151,124:152,132:$Vj}),{45:$Vi,120:153},o([131,132],[2,60]),o($VJ,$VK,{21:154,63:155,74:156,75:$VL}),o($V6,[2,212]),{45:$VM,61:158},o($Vf,[2,245],{58:160,314:[1,161]}),{45:[2,248]},o($VN,$VO,{24:162,62:163,66:164,67:$VP}),o($V6,[2,214]),{20:166,44:$Vn,45:$Vo,56:167,57:$Vp,60:98},{45:[1,168]},o($V7,[2,230]),{47:[1,169]},{47:[2,356]},{13:$V8,16:$V9,34:$VQ,35:$VR,59:180,87:$VS,93:$VT,98:181,152:170,183:171,185:172,224:$VU,229:174,230:$VV,237:173,238:178,239:$VW,240:$VX,257:189,259:190,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb},o($V91,[2,241],{60:98,52:202,56:203,20:204,44:$Vn,45:$Vo,57:$Vp}),o($Vs,[2,236]),o($VN,$VO,{62:163,66:164,24:205,67:$VP}),o($V6,[2,244]),o($Vu,[2,216]),{37:[1,206]},{37:[2,225]},{37:[2,226]},o($Va1,[2,414],{242:207}),{13:$V8,16:$V9,59:180,87:$VS,93:$VT,98:181,230:$Vy,234:209,235:208,238:210,239:$VW,240:$VX,257:189,259:190,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb},o($Vb1,[2,416],{246:211}),o($Vb1,[2,142],{250:212,251:213,252:[2,424],289:[1,214],329:[1,215],330:[1,216],331:[1,217],332:[1,218],333:[1,219],334:[1,220]}),o($Vc1,[2,426],{254:221}),o($Vd1,[2,434],{262:222}),{13:$V8,16:$V9,34:$Ve1,35:$Vf1,59:226,71:225,72:227,82:224,87:$VS,98:228,257:189,259:190,266:223,268:231,269:$Vg1,270:$Vh1,271:$Vi1,273:$Vj1,274:236,275:$Vk1,276:$Vl1,277:239,278:$Vm1,279:$Vn1,282:$Vo1,284:$Vp1,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb,334:$Vq1,335:$Vr1,336:$Vs1,337:$Vt1,338:$Vu1,339:$Vv1},{13:$V8,16:$V9,34:$Ve1,35:$Vf1,59:226,71:225,72:227,82:224,87:$VS,98:228,257:189,259:190,266:249,268:231,269:$Vg1,270:$Vh1,271:$Vi1,273:$Vj1,274:236,275:$Vk1,276:$Vl1,277:239,278:$Vm1,279:$Vn1,282:$Vo1,284:$Vp1,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb,334:$Vq1,335:$Vr1,336:$Vs1,337:$Vt1,338:$Vu1,339:$Vv1},{13:$V8,16:$V9,34:$Ve1,35:$Vf1,59:226,71:225,72:227,82:224,87:$VS,98:228,257:189,259:190,266:250,268:231,269:$Vg1,270:$Vh1,271:$Vi1,273:$Vj1,274:236,275:$Vk1,276:$Vl1,277:239,278:$Vm1,279:$Vn1,282:$Vo1,284:$Vp1,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb,334:$Vq1,335:$Vr1,336:$Vs1,337:$Vt1,338:$Vu1,339:$Vv1},o($Vv,[2,439]),o($V0,[2,5]),o($Vw1,[2,263],{92:251}),o($Vx1,[2,265],{94:252}),{34:[1,254],38:[1,253]},o($Vy1,[2,267]),o($V2,[2,274],{6:[2,276]}),o($VF,[2,279],{108:255,138:256,139:[1,257]}),o($VF,[2,49]),{13:$V8,16:$V9,59:258,306:$Vb},o($VF,[2,65]),o($VF,[2,308]),o($VF,[2,309]),o($VF,[2,310]),{115:[1,259]},o($Vz1,[2,62]),{13:$V8,16:$V9,59:260,306:$Vb},o($Vf,[2,307]),{13:$V8,16:$V9,59:261,306:$Vb},o($VA1,[2,313],{144:262}),o($VA1,[2,312]),{13:$V8,16:$V9,34:$VQ,35:$VR,59:180,87:$VS,93:$VT,98:181,152:263,183:171,185:172,224:$VU,229:174,230:$VV,237:173,238:178,239:$VW,240:$VX,257:189,259:190,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb},o($VI,[2,296],{126:264}),o($VI,[2,295]),o([44,131,134],[2,58]),o($VI,[2,302],{130:265}),o($VI,[2,301]),o([44,132,134],[2,57]),o($V5,[2,6]),o($VB1,[2,253],{64:266,77:267,78:[1,268]}),o($VJ,[2,252]),{13:$V8,16:$V9,35:$Vf1,59:274,71:272,72:273,76:269,82:271,84:270,268:231,269:$Vg1,270:$Vh1,271:$Vi1,273:$Vj1,274:236,275:$Vk1,276:$Vl1,277:239,278:$Vm1,279:$Vn1,282:$Vo1,284:$Vp1,306:$Vb,334:$Vq1,335:$Vr1,336:$Vs1,337:$Vt1,338:$Vu1,339:$Vv1},o([6,47,67,75,78,86,88,90],[2,20]),o($Vq,$VC1,{25:19,30:275,154:276,18:277,22:278,155:279,161:280,162:281,28:$V3,45:$VD1,47:$VD1,90:$VD1,118:$VD1,166:$VD1,167:$VD1,169:$VD1,172:$VD1,173:$VD1}),{13:$V8,16:$V9,59:282,306:$Vb},o($Vf,[2,246]),o($V5,[2,7]),o($VJ,$VK,{63:155,74:156,21:283,75:$VL}),o($VN,[2,250]),{68:[1,284]},o($VN,$VO,{62:163,66:164,24:285,67:$VP}),o($V6,[2,228]),o($Vq,$VG,{151:147,46:286,150:287,47:[2,231]}),o($V6,[2,89]),{47:[2,359],182:288,322:[1,289]},{13:$V8,16:$V9,34:$VE1,59:294,184:290,188:291,193:292,195:$VF1,306:$Vb},o($VG1,[2,363],{188:291,193:292,59:294,186:296,187:297,184:298,13:$V8,16:$V9,34:$VE1,195:$VF1,306:$Vb}),o($VH1,[2,361]),o($VH1,[2,362]),{13:$V8,16:$V9,34:$VQ,35:$VR,59:180,87:$VS,93:$VT,98:181,185:302,197:300,223:299,224:$VU,227:301,229:304,230:$VV,237:303,238:178,239:$VW,240:$VX,257:189,259:190,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb},{13:$V8,16:$V9,34:$VE1,59:294,184:305,188:291,193:292,195:$VF1,306:$Vb},o($VI1,[2,131]),o($VI1,[2,132]),{13:$V8,16:$V9,34:$VQ,59:180,87:$VS,93:$VT,98:181,229:307,230:$VV,231:306,237:308,238:178,239:$VW,240:$VX,257:189,259:190,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb},o($VI1,[2,133]),o($VI1,[2,134]),o($VI1,[2,135]),o($VI1,[2,136]),o($VI1,[2,137]),o($VJ1,[2,175],{291:[1,309],292:[1,310]}),o($VJ1,[2,178]),o($VJ1,[2,179]),o($VJ1,[2,180]),o($VJ1,[2,181]),o($VJ1,[2,182]),o($VJ1,[2,183]),o($VK1,[2,184]),o($VK1,[2,185]),o($VK1,[2,186]),o($VK1,[2,187]),o($VJ1,[2,188]),o($VJ1,[2,189]),o($VJ1,[2,190]),o($VJ1,[2,191]),o($VJ1,[2,192]),o($VJ1,[2,193]),o($VN,$VO,{62:163,66:164,24:311,67:$VP}),o($Vr,[2,240]),o($V91,[2,242]),o($V5,[2,18]),{34:[1,312]},o([37,38,191,272],[2,138],{243:313,244:[1,314]}),{13:$V8,16:$V9,34:$VE1,59:294,193:315,195:$VF1,306:$Vb},o($VH1,[2,410]),o($VH1,[2,411]),o($Va1,[2,140],{247:316,248:[1,317]}),o($Vv,$Vw,{253:121,261:122,265:123,249:318,217:$Vx,267:$Vz,328:$VA}),{252:[1,319]},o($VL1,[2,418]),o($VL1,[2,419]),o($VL1,[2,420]),o($VL1,[2,421]),o($VL1,[2,422]),o($VL1,[2,423]),{252:[2,425]},o([37,38,191,244,248,252,272,289,329,330,331,332,333,334],[2,145],{255:320,256:321,257:322,259:323,267:[1,325],300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,328:[1,324]}),o($Vc1,[2,149],{263:326,264:327,26:$VM1,325:$VN1}),o($Vd1,[2,151]),o($Vd1,[2,154]),o($Vd1,[2,155]),o($Vd1,[2,156],{35:$VO1,93:$VP1}),o($Vd1,[2,157]),o($Vd1,[2,158]),o($Vd1,[2,159]),o($Vv,$Vw,{241:117,245:119,249:120,253:121,261:122,265:123,73:332,217:$Vx,267:$Vz,328:$VA}),o($VQ1,[2,161]),{93:[1,333]},{35:[1,334]},{35:[1,335]},{35:[1,336]},{35:$VR1,93:$VS1,177:337},{35:[1,340]},{35:[1,342],93:[1,341]},{278:[1,343]},{35:[1,344]},{35:[1,345]},{35:[1,346]},o($VT1,[2,440]),o($VT1,[2,441]),o($VT1,[2,442]),o($VT1,[2,443]),o($VT1,[2,444]),{278:[2,446]},o($Vd1,[2,152]),o($Vd1,[2,153]),{13:$V8,16:$V9,47:[1,347],59:349,87:$VS,97:348,98:350,99:$VU1,257:189,259:190,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb},{47:[1,352],93:[1,353]},{45:[1,354]},o($Vy1,[2,268]),o($VF,[2,48]),o($VF,[2,280]),{118:[1,355]},o($VF,[2,64]),o($Vf,$VC,{141:142,114:356,118:$VD,140:$VE}),o($Vz1,[2,63]),o($VF,[2,51]),{47:[1,357],118:[1,359],145:358},o($VA1,[2,325],{153:360,322:[1,361]}),{44:[1,362],133:363,134:$VV1},{44:[1,365],133:366,134:$VV1},o($VW1,[2,255],{65:367,85:368,86:[1,369],88:[1,370]}),o($VB1,[2,254]),{68:[1,371]},o($VJ,[2,29],{268:231,274:236,277:239,82:271,71:272,72:273,59:274,84:372,13:$V8,16:$V9,35:$Vf1,269:$Vg1,270:$Vh1,271:$Vi1,273:$Vj1,275:$Vk1,276:$Vl1,278:$Vm1,279:$Vn1,282:$Vo1,284:$Vp1,306:$Vb,334:$Vq1,335:$Vr1,336:$Vs1,337:$Vt1,338:$Vu1,339:$Vv1}),o($VX1,[2,259]),o($VY1,[2,82]),o($VY1,[2,83]),o($VY1,[2,84]),{35:$VO1,93:$VP1},{47:[1,373]},{47:[1,374]},{20:375,44:$Vn,45:$Vo,60:98},{20:376,44:$Vn,45:$Vo,60:98},o($VZ1,[2,329],{156:377}),o($VZ1,[2,328]),{13:$V8,16:$V9,34:$VQ,35:$V_1,59:180,87:$VS,93:$VT,98:181,163:378,198:379,200:380,224:$V$1,229:382,230:$VV,237:381,238:178,239:$VW,240:$VX,257:189,259:190,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb},o($Vr,[2,19]),o($VW1,[2,21]),{13:$V8,16:$V9,34:$V02,35:$V12,59:274,69:385,70:386,71:387,72:388,268:231,269:$Vg1,270:$Vh1,271:$Vi1,273:$Vj1,274:236,275:$Vk1,276:$Vl1,277:239,278:$Vm1,279:$Vn1,282:$Vo1,284:$Vp1,306:$Vb,334:$Vq1,335:$Vr1,336:$Vs1,337:$Vt1,338:$Vu1,339:$Vv1},o($V5,[2,15]),{47:[1,391]},{47:[2,232]},{47:[2,90]},o($Vq,[2,358],{47:[2,360]}),o($VG1,[2,91]),o($V22,[2,365],{189:392}),o($Vq,$V32,{194:393,196:394}),o($Vq,[2,97]),o($Vq,[2,98]),o($Vq,[2,99]),o($VG1,[2,92]),o($VG1,[2,93]),o($VG1,[2,364]),{13:$V8,16:$V9,34:$VQ,35:$VR,38:[1,395],59:180,87:$VS,93:$VT,98:181,185:302,197:396,224:$VU,227:301,229:304,230:$VV,237:303,238:178,239:$VW,240:$VX,257:189,259:190,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb},o($V42,[2,398]),o($V52,[2,125]),o($V52,[2,126]),o($V52,[2,402]),o($V52,[2,403]),{225:[1,397]},{13:$V8,16:$V9,34:$VE1,59:294,193:398,195:$VF1,306:$Vb},o($VH1,[2,406]),o($VH1,[2,407]),o($VJ1,[2,176]),{13:$V8,16:$V9,59:399,306:$Vb},o($V5,[2,17]),{38:[1,400]},o($Va1,[2,415]),o($Vv,$Vw,{245:119,249:120,253:121,261:122,265:123,241:401,217:$Vx,267:$Vz,328:$VA}),{13:$V8,16:$V9,59:180,87:$VS,93:$VT,98:181,230:$Vy,234:403,236:402,238:404,239:$VW,240:$VX,257:189,259:190,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb},o($Vb1,[2,417]),o($Vv,$Vw,{249:120,253:121,261:122,265:123,245:405,217:$Vx,267:$Vz,328:$VA}),o($Vb1,[2,143]),{35:$VR1,93:$VS1,177:406},o($Vc1,[2,427]),o($Vv,$Vw,{261:122,265:123,253:407,217:$Vx,267:$Vz,328:$VA}),o($Vd1,[2,430],{258:408}),o($Vd1,[2,432],{260:409}),o($VL1,[2,428]),o($VL1,[2,429]),o($Vd1,[2,435]),o($Vv,$Vw,{265:123,261:410,217:$Vx,267:$Vz,328:$VA}),o($VL1,[2,436]),o($VL1,[2,437]),o($VQ1,[2,85]),o($VL1,[2,349],{175:411,310:[1,412]}),{38:[1,413]},o($VQ1,[2,162]),o($Vv,$Vw,{241:117,245:119,249:120,253:121,261:122,265:123,73:414,217:$Vx,267:$Vz,328:$VA}),o($Vv,$Vw,{241:117,245:119,249:120,253:121,261:122,265:123,73:415,217:$Vx,267:$Vz,328:$VA}),o($Vv,$Vw,{241:117,245:119,249:120,253:121,261:122,265:123,73:416,217:$Vx,267:$Vz,328:$VA}),o($VQ1,[2,166]),o($VQ1,[2,87]),o($VL1,[2,353],{178:417}),{34:[1,418]},o($VQ1,[2,168]),o($Vv,$Vw,{241:117,245:119,249:120,253:121,261:122,265:123,73:419,217:$Vx,267:$Vz,328:$VA}),{45:$VM,61:420},o($V62,[2,447],{280:421,310:[1,422]}),o($VL1,[2,451],{283:423,310:[1,424]}),o($VL1,[2,453],{285:425,310:[1,426]}),o($VB,[2,40]),o($Vw1,[2,264]),o($V72,[2,43]),o($V72,[2,44]),o($V72,[2,45]),o($VB,[2,41]),o($Vx1,[2,266]),o($V82,[2,269],{96:427}),{13:$V8,16:$V9,59:428,306:$Vb},o($VF,[2,50]),o([6,44,131,132,134,191],[2,66]),o($VA1,[2,314]),{13:$V8,16:$V9,34:[1,430],59:431,146:429,306:$Vb},o($VA1,[2,68]),o($Vq,[2,324],{47:$V92,118:$V92}),{45:$VM,61:432},o($VI,[2,297]),o($Vf,[2,304],{135:433,314:[1,434]}),{45:$VM,61:435},o($VI,[2,303]),o($VW1,[2,22]),o($VW1,[2,256]),{87:[1,436]},{87:[1,437]},{13:$V8,16:$V9,34:$Va2,35:$Vf1,59:274,71:272,72:273,79:438,80:439,81:$Vb2,82:271,83:$Vc2,84:442,268:231,269:$Vg1,270:$Vh1,271:$Vi1,273:$Vj1,274:236,275:$Vk1,276:$Vl1,277:239,278:$Vm1,279:$Vn1,282:$Vo1,284:$Vp1,306:$Vb,334:$Vq1,335:$Vr1,336:$Vs1,337:$Vt1,338:$Vu1,339:$Vv1},o($VX1,[2,260]),o($Vd2,[2,69]),o($Vd2,[2,70]),o($VJ,$VK,{63:155,74:156,21:444,75:$VL}),o($VN,$VO,{62:163,66:164,24:445,67:$VP}),{45:[2,339],47:[2,71],89:455,90:$V4,118:[1,451],157:446,158:447,165:448,166:[1,449],167:[1,450],169:[1,452],172:[1,453],173:[1,454]},o($VZ1,[2,337],{164:456,322:[1,457]}),o($Ve2,$Vf2,{199:458,202:459,208:460,209:462,34:$Vg2}),o($Vh2,[2,373],{202:459,208:460,209:462,201:463,199:464,13:$Vf2,16:$Vf2,35:$Vf2,195:$Vf2,217:$Vf2,222:$Vf2,306:$Vf2,34:$Vg2}),o($Vi2,[2,371]),o($Vi2,[2,372]),{13:$V8,16:$V9,34:$VQ,35:$V_1,59:180,87:$VS,93:$VT,98:181,200:468,204:466,224:$V$1,226:465,228:467,229:470,230:$VV,237:469,238:178,239:$VW,240:$VX,257:189,259:190,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb},o($Ve2,$Vf2,{202:459,208:460,209:462,199:471,34:$Vg2}),o($VN,[2,23],{268:231,274:236,277:239,59:274,71:387,72:388,70:472,13:$V8,16:$V9,34:$V02,35:$V12,269:$Vg1,270:$Vh1,271:$Vi1,273:$Vj1,275:$Vk1,276:$Vl1,278:$Vm1,279:$Vn1,282:$Vo1,284:$Vp1,306:$Vb,334:$Vq1,335:$Vr1,336:$Vs1,337:$Vt1,338:$Vu1,339:$Vv1}),o($Vj2,[2,257]),o($Vj2,[2,24]),o($Vj2,[2,25]),o($Vv,$Vw,{241:117,245:119,249:120,253:121,261:122,265:123,73:473,217:$Vx,267:$Vz,328:$VA}),o($Vj2,[2,28]),o($VN,$VO,{62:163,66:164,24:474,67:$VP}),o([47,118,225,322],[2,94],{190:475,191:[1,476]}),o($V22,[2,96]),{13:$V8,16:$V9,34:$VQ,35:$VR,59:180,87:$VS,93:$VT,98:181,185:302,197:477,224:$VU,227:301,229:304,230:$VV,237:303,238:178,239:$VW,240:$VX,257:189,259:190,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb},o($Vk2,[2,121]),o($V42,[2,399]),o($Vk2,[2,122]),{13:$V8,16:$V9,34:$VQ,59:180,87:$VS,93:$VT,98:181,229:479,230:$VV,232:478,237:480,238:178,239:$VW,240:$VX,257:189,259:190,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb},o($VJ1,[2,177]),o($Vu,[2,14]),o($Va1,[2,139]),{233:[1,481]},{233:[2,412]},{233:[2,413]},o($Vb1,[2,141]),o($Vb1,[2,144]),o($Vc1,[2,146]),o($Vc1,[2,147],{264:327,263:482,26:$VM1,325:$VN1}),o($Vc1,[2,148],{264:327,263:483,26:$VM1,325:$VN1}),o($Vd1,[2,150]),o($VL1,[2,351],{176:484}),o($VL1,[2,350]),o([6,13,16,26,34,35,37,38,45,47,78,81,83,86,87,88,90,93,118,166,167,169,172,173,191,224,230,239,240,244,248,252,267,269,270,271,272,273,275,276,278,279,282,284,289,293,294,295,296,297,298,299,300,301,302,303,304,305,306,322,325,328,329,330,331,332,333,334,335,336,337,338,339],[2,160]),{38:[1,485]},{272:[1,486]},{272:[1,487]},o($Vv,$Vw,{241:117,245:119,249:120,253:121,261:122,265:123,73:488,217:$Vx,267:$Vz,328:$VA}),{38:[1,489]},{38:[1,490]},o($VQ1,[2,170]),o($Vv,$Vw,{241:117,245:119,249:120,253:121,261:122,265:123,281:491,73:493,26:[1,492],217:$Vx,267:$Vz,328:$VA}),o($V62,[2,448]),o($Vv,$Vw,{241:117,245:119,249:120,253:121,261:122,265:123,73:494,217:$Vx,267:$Vz,328:$VA}),o($VL1,[2,452]),o($Vv,$Vw,{241:117,245:119,249:120,253:121,261:122,265:123,73:495,217:$Vx,267:$Vz,328:$VA}),o($VL1,[2,454]),{35:[1,498],47:[1,496],100:497},o($VF,[2,61]),{45:[1,499]},{45:[2,315]},{45:[2,316]},o($VF,[2,55]),{13:$V8,16:$V9,59:500,306:$Vb},o($Vf,[2,305]),o($VF,[2,56]),o($VW1,[2,35],{88:[1,501]}),o($VW1,[2,36],{86:[1,502]}),o($VB1,[2,30],{268:231,274:236,277:239,82:271,71:272,72:273,59:274,84:442,80:503,13:$V8,16:$V9,34:$Va2,35:$Vf1,81:$Vb2,83:$Vc2,269:$Vg1,270:$Vh1,271:$Vi1,273:$Vj1,275:$Vk1,276:$Vl1,278:$Vm1,279:$Vn1,282:$Vo1,284:$Vp1,306:$Vb,334:$Vq1,335:$Vr1,336:$Vs1,337:$Vt1,338:$Vu1,339:$Vv1}),o($Vl2,[2,261]),{35:$Vf1,82:504},{35:$Vf1,82:505},o($Vl2,[2,33]),o($Vl2,[2,34]),{31:506,47:[2,221],89:507,90:$V4},{32:508,47:[2,223],89:509,90:$V4},o($VZ1,[2,330]),o($Vm2,[2,331],{159:510,322:[1,511]}),{45:$VM,61:512},{45:$VM,61:513},{45:$VM,61:514},{13:$V8,16:$V9,34:[1,516],59:517,168:515,306:$Vb},o($Vn2,[2,343],{170:518,315:[1,519]}),{13:$V8,16:$V9,35:$Vf1,59:274,71:272,72:273,82:271,84:520,268:231,269:$Vg1,270:$Vh1,271:$Vi1,273:$Vj1,274:236,275:$Vk1,276:$Vl1,277:239,278:$Vm1,279:$Vn1,282:$Vo1,284:$Vp1,306:$Vb,334:$Vq1,335:$Vr1,336:$Vs1,337:$Vt1,338:$Vu1,339:$Vv1},{35:[1,521]},o($Vo2,[2,81]),o($VZ1,[2,73]),o($Vq,[2,336],{45:$Vp2,47:$Vp2,90:$Vp2,118:$Vp2,166:$Vp2,167:$Vp2,169:$Vp2,172:$Vp2,173:$Vp2}),o($Vh2,[2,101]),o($Vq,[2,377],{203:522}),o($Vq,[2,375]),o($Vq,[2,376]),o($Ve2,[2,385],{210:523,211:524}),o($Vh2,[2,102]),o($Vh2,[2,374]),{13:$V8,16:$V9,34:$VQ,35:$V_1,38:[1,525],59:180,87:$VS,93:$VT,98:181,200:468,204:526,224:$V$1,228:467,229:470,230:$VV,237:469,238:178,239:$VW,240:$VX,257:189,259:190,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb},o($V42,[2,400]),o($V52,[2,127]),o($V52,[2,128]),o($V52,[2,404]),o($V52,[2,405]),{225:[1,527]},o($Vj2,[2,258]),{37:[1,529],38:[1,528]},o($V5,[2,16]),o($V22,[2,366]),o($V22,[2,367],{193:292,59:294,192:530,188:531,13:$V8,16:$V9,34:$VE1,195:$VF1,306:$Vb}),o($Vq2,[2,100],{272:[1,532]}),{233:[1,533]},{233:[2,408]},{233:[2,409]},o([13,16,34,37,195,233,306],[2,130]),o($Vd1,[2,431]),o($Vd1,[2,433]),o($Vv,$Vw,{241:117,245:119,249:120,253:121,261:122,265:123,73:534,217:$Vx,267:$Vz,328:$VA}),o($VQ1,[2,163]),o($Vv,$Vw,{241:117,245:119,249:120,253:121,261:122,265:123,73:535,217:$Vx,267:$Vz,328:$VA}),o($Vv,$Vw,{241:117,245:119,249:120,253:121,261:122,265:123,73:536,217:$Vx,267:$Vz,328:$VA}),{38:[1,537],272:[1,538]},o($VQ1,[2,167]),o($VQ1,[2,169]),{38:[1,539]},{38:[2,449]},{38:[2,450]},{38:[1,540]},{38:[2,455],191:[1,543],286:541,287:542},o($VB,[2,42]),o($V82,[2,270]),{13:$V8,16:$V9,59:349,87:$VS,97:545,98:350,99:$VU1,101:544,257:189,259:190,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb},o($Vq,$VG,{151:147,147:546,150:547,47:[2,317]}),o($VI,[2,59]),{87:[1,548]},{87:[1,549]},o($Vl2,[2,262]),o($Vl2,[2,31]),o($Vl2,[2,32]),{47:[2,11]},{47:[2,222]},{47:[2,12]},{47:[2,224]},o($Vq,$VC1,{162:281,160:550,161:551,45:$Vr2,47:$Vr2,90:$Vr2,118:$Vr2,166:$Vr2,167:$Vr2,169:$Vr2,172:$Vr2,173:$Vr2}),o($Vm2,[2,332]),o($Vo2,[2,74],{323:[1,552]}),o($Vo2,[2,75]),o($Vo2,[2,76]),{45:$VM,61:553},{45:[2,341]},{45:[2,342]},{13:$V8,16:$V9,34:[1,555],59:556,171:554,306:$Vb},o($Vn2,[2,344]),o($Vo2,[2,79]),o($Vv,$Vw,{241:117,245:119,249:120,253:121,261:122,265:123,174:557,73:558,234:559,217:$Vx,230:$Vy,267:$Vz,328:$VA}),{13:$V8,16:$V9,34:$VQ,35:$V_1,59:180,87:$VS,93:$VT,98:181,200:468,204:560,224:$V$1,228:467,229:470,230:$VV,237:469,238:178,239:$VW,240:$VX,257:189,259:190,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb},o($V42,[2,106],{324:[1,561]}),o($Vs2,[2,392],{212:562,216:563,222:[1,564]}),o($Vt2,[2,123]),o($V42,[2,401]),o($Vt2,[2,124]),o($Vj2,[2,26]),{34:[1,565]},o($V22,[2,95]),o($V22,[2,368]),o($Vq,[2,370]),o($VI1,[2,129]),{38:[1,566],272:[1,567]},{38:[1,568]},{272:[1,569]},o($VQ1,[2,88]),o($VL1,[2,354]),o($VQ1,[2,171]),o($VQ1,[2,172]),{38:[1,570]},{38:[2,456]},{288:[1,571]},{13:$V8,16:$V9,38:[1,572],59:349,87:$VS,97:573,98:350,99:$VU1,257:189,259:190,290:185,293:$VY,294:$VZ,295:$V_,296:$V$,297:$V01,298:$V11,299:$V21,300:$V31,301:$V41,302:$V51,303:$V61,304:$V71,305:$V81,306:$Vb},o($Vu2,[2,271]),{47:[1,574]},{47:[2,318]},o($VW1,[2,37]),o($VW1,[2,38]),o($VZ1,[2,72]),o($VZ1,[2,334]),{45:[2,340]},o($Vo2,[2,77]),{45:$VM,61:575},{45:[2,345]},{45:[2,346]},{37:[1,576]},{37:[2,347]},{37:[2,348]},o($Vq2,[2,379],{205:577,272:[1,578]}),o($Ve2,[2,384]),o([13,16,34,35,38,87,93,224,230,239,240,293,294,295,296,297,298,299,300,301,302,303,304,305,306,324],[2,107],{325:[1,579]}),{13:$V8,16:$V9,35:[1,585],59:582,195:[1,583],213:580,214:581,217:[1,584],306:$Vb},o($Vs2,[2,393]),{38:[1,586]},o($VQ1,[2,86]),o($VL1,[2,352]),o($VQ1,[2,164]),o($Vv,$Vw,{241:117,245:119,249:120,253:121,261:122,265:123,73:587,217:$Vx,267:$Vz,328:$VA}),o($VQ1,[2,173]),{289:[1,588]},o($V82,[2,46]),o($Vu2,[2,272]),o($Vv2,[2,319],{148:589,322:[1,590]}),o($Vo2,[2,78]),{34:[1,591]},o([45,47,90,118,166,167,169,172,173,225,322],[2,103],{206:592,191:[1,593]}),o($Vq,[2,378]),o($Ve2,[2,386]),o($Vw2,[2,109]),o($Vw2,[2,390],{215:594,326:595,26:[1,597],327:[1,596],328:[1,598]}),o($Vx2,[2,110]),o($Vx2,[2,111]),{13:$V8,16:$V9,35:[1,602],59:603,93:[1,601],195:$Vy2,218:599,219:600,222:$Vz2,306:$Vb},o($Ve2,$Vf2,{209:462,208:606}),o($Vj2,[2,27]),{38:[1,607]},{290:608,296:$V$,297:$V01,298:$V11,299:$V21},o($Vq,$VG,{151:147,149:609,150:610,47:$VA2,118:$VA2}),o($Vv2,[2,320]),{38:[1,611]},o($Vq2,[2,380]),o($Vq2,[2,104],{209:462,207:612,208:613,13:$Vf2,16:$Vf2,35:$Vf2,195:$Vf2,217:$Vf2,222:$Vf2,306:$Vf2,34:[1,614]}),o($Vw2,[2,108]),o($Vw2,[2,391]),o($Vw2,[2,387]),o($Vw2,[2,388]),o($Vw2,[2,389]),o($Vx2,[2,112]),o($Vx2,[2,114]),o($Vx2,[2,115]),o($VB2,[2,394],{220:615}),o($Vx2,[2,117]),o($Vx2,[2,118]),{13:$V8,16:$V9,59:616,195:[1,617],306:$Vb},{38:[1,618]},o($VQ1,[2,165]),{38:[2,174]},o($VA1,[2,67]),o($VA1,[2,322]),o($Vo2,[2,80]),o($Vq,$V32,{196:394,194:619}),o($Vq,[2,381]),o($Vq,[2,382]),{13:$V8,16:$V9,38:[2,396],59:603,195:$Vy2,219:621,221:620,222:$Vz2,306:$Vb},o($Vx2,[2,119]),o($Vx2,[2,120]),o($Vx2,[2,113]),o($Vq2,[2,105]),{38:[1,622]},{38:[2,397],324:[1,623]},o($Vx2,[2,116]),o($VB2,[2,395])],
defaultActions: {5:[2,199],6:[2,200],8:[2,198],26:[2,1],27:[2,3],28:[2,210],77:[2,47],86:[2,291],100:[2,248],107:[2,356],115:[2,225],116:[2,226],220:[2,425],248:[2,446],287:[2,232],288:[2,90],403:[2,412],404:[2,413],430:[2,315],431:[2,316],479:[2,408],480:[2,409],492:[2,449],493:[2,450],506:[2,11],507:[2,222],508:[2,12],509:[2,224],516:[2,341],517:[2,342],542:[2,456],547:[2,318],552:[2,340],555:[2,345],556:[2,346],558:[2,347],559:[2,348],608:[2,174]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    SPARQL parser in the Jison parser generator format.
  */

  var Wildcard = require('./Wildcard').Wildcard;

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean';

  var base = '', basePath = '', baseRoot = '';

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // Resolves an IRI against a base path
  function resolveIRI(iri) {
    // Strip off possible angular brackets
    if (iri[0] === '<')
      iri = iri.substring(1, iri.length - 1);
    // Return absolute IRIs unmodified
    if (/^[a-z]+:/.test(iri))
      return iri;
    if (!Parser.base)
      throw new Error('Cannot resolve relative IRI ' + iri + ' because no base IRI was set.');
    if (!base) {
      base = Parser.base;
      basePath = base.replace(/[^\/:]*$/, '');
      baseRoot = base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
    }
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined:
      return base;
    // Resolve relative fragment IRIs against the base IRI
    case '#':
      return base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?':
      return base.replace(/(?:\?.*)?$/, iri);
    // Resolve root relative IRIs at the root of the base IRI
    case '/':
      return baseRoot + iri;
    // Resolve all other IRIs at the base IRI's path
    default:
      return basePath + iri;
    }
  }

  // If the item is a variable, ensures it starts with a question mark
  function toVar(variable) {
    if (variable) {
      var first = variable[0];
      if (first === '?' || first === '$') return Parser.factory.variable(variable.substr(1));
    }
    return variable;
  }

  // Creates an operation with the given name and arguments
  function operation(operatorName, args) {
    return { type: 'operation', operator: operatorName, args: args || [] };
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr === '*'? new Wildcard() : expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Transforms a list of operations types and arguments into a tree of operations
  function createOperationTree(initialExpression, operationList) {
    for (var i = 0, l = operationList.length, item; i < l && (item = operationList[i]); i++)
      initialExpression = operation(item[0], [initialExpression, item[1]]);
    return initialExpression;
  }

  // Group datasets by default and named
  function groupDatasets(fromClauses, groupName) {
    var defaults = [], named = [], l = fromClauses.length, fromClause, group = {};
    if (!l)
      return null;
    for (var i = 0; i < l && (fromClause = fromClauses[i]); i++)
      (fromClause.named ? named : defaults).push(fromClause.iri);
    group[groupName || 'from'] = { default: defaults, named: named };
    return group;
  }

  // Converts the string to a number
  function toInt(string) {
    return parseInt(string, 10);
  }

  // Transforms a possibly single group into its patterns
  function degroupSingle(group) {
    return group.type === 'group' && group.patterns.length === 1 ? group.patterns[0] : group;
  }

  // Creates a literal with the given value and type
  function createTypedLiteral(value, type) {
    if (type && type.termType !== 'NamedNode'){
      type = Parser.factory.namedNode(type);
    }
    return Parser.factory.literal(value, type);
  }

  // Creates a literal with the given value and language
  function createLangLiteral(value, lang) {
    return Parser.factory.literal(value, lang);
  }

  // Creates a triple with the given subject, predicate, and object
  function triple(subject, predicate, object) {
    var triple = {};
    if (subject   != null) triple.subject   = subject;
    if (predicate != null) triple.predicate = predicate;
    if (object    != null) triple.object    = object;
    return triple;
  }

  // Creates a new blank node
  function blank(name) {
    if (typeof name === 'string') {  // Only use name if a name is given
      if (name.startsWith('e_')) return Parser.factory.blankNode(name);
      return Parser.factory.blankNode('e_' + name);
    }
    return Parser.factory.blankNode('g_' + blankId++);
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }

  // Regular expression and replacement strings to escape strings
  var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      escapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      fromCharCode = String.fromCharCode;

  // Translates escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    try {
      string = string.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = escapeReplacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
    }
    catch (error) { return ''; }
    return string;
  }

  // Creates a list, collecting its (possibly blank) items and triples associated with those items
  function createList(objects) {
    var list = blank(), head = list, listItems = [], listTriples, triples = [];
    objects.forEach(function (o) { listItems.push(o.entity); appendAllTo(triples, o.triples); });

    // Build an RDF list out of the items
    for (var i = 0, j = 0, l = listItems.length, listTriples = Array(l * 2); i < l;)
      listTriples[j++] = triple(head, Parser.factory.namedNode(RDF_FIRST), listItems[i]),
      listTriples[j++] = triple(head, Parser.factory.namedNode(RDF_REST),  head = ++i < l ? blank() : Parser.factory.namedNode(RDF_NIL));

    // Return the list's identifier, its triples, and the triples associated with its items
    return { entity: list, triples: appendAllTo(listTriples, triples) };
  }

  // Creates a blank node identifier, collecting triples with that blank node as subject
  function createAnonymousObject(propertyList) {
    var entity = blank();
    return {
      entity: entity,
      triples: propertyList.map(function (t) { return extend(triple(entity), t); })
    };
  }

  // Collects all (possibly blank) objects, and triples that have them as subject
  function objectListToTriples(predicate, objectList, otherTriples) {
    var objects = [], triples = [];
    objectList.forEach(function (l) {
      objects.push(triple(null, predicate, l.entity));
      appendAllTo(triples, l.triples);
    });
    return unionAll(objects, otherTriples || [], triples);
  }

  // Simplifies groups by merging adjacent BGPs
  function mergeAdjacentBGPs(groups) {
    var merged = [], currentBgp;
    for (var i = 0, group; group = groups[i]; i++) {
      switch (group.type) {
        // Add a BGP's triples to the current BGP
        case 'bgp':
          if (group.triples.length) {
            if (!currentBgp)
              appendTo(merged, currentBgp = group);
            else
              appendAllTo(currentBgp.triples, group.triples);
          }
          break;
        // All other groups break up a BGP
        default:
          // Only add the group if its pattern is non-empty
          if (!group.patterns || group.patterns.length > 0) {
            appendTo(merged, group);
            currentBgp = null;
          }
      }
    }
    return merged;
  }

  // Return the id of an expression
  function getExpressionId(expression) {
    return expression.variable ? expression.variable.value : expression.value || expression.expression.value;
  }

  // Get all "aggregate"'s from an expression
  function getAggregatesOfExpression(expression) {
    if (!expression) {
      return [];
    }
    if (expression.type === 'aggregate') {
      return [expression];
    } else if (expression.type === "operation") {
      const aggregates = [];
      for (const arg of expression.args) {
        aggregates.push(...getAggregatesOfExpression(arg));
      }
      return aggregates;
    }
    return [];
  }

  // Get all variables used in an operation
  function getVariablesFromOperation(operation) {
    const variables = new Set();
    for (const arg of operation.args) {
      if (arg.termType === "Variable") {
        variables.add(arg);
      } else if (arg.type === "operation") {
        getVariablesFromOperation(arg).forEach(v => variables.add(v));
      }
    }
    return variables;
  }

  // Helper function to flatten arrays
  function flatten(input, depth = 1, stack = []) {
    for (const item of input) {
        if (depth > 0 && item instanceof Array) {
          flatten(item, depth - 1, stack);
        } else {
          stack.push(item);
        }
    }
    return stack;
}

  function allowsRdfStar(value) {
    if (!Parser.sparqlStar) {
      throw new Error('SPARQL* support is not enabled');
    }
    return value;
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */
break;
case 1:return 12
break;
case 2:return 15
break;
case 3:return 28
break;
case 4:return 310
break;
case 5:return 311
break;
case 6:return 35
break;
case 7:return 37
break;
case 8:return 38
break;
case 9:return 26
break;
case 10:return 40
break;
case 11:return 44
break;
case 12:return 45
break;
case 13:return 47
break;
case 14:return 49
break;
case 15:return 54
break;
case 16:return 57
break;
case 17:return 314
break;
case 18:return 67
break;
case 19:return 68
break;
case 20:return 75
break;
case 21:return 78
break;
case 22:return 81
break;
case 23:return 83
break;
case 24:return 86
break;
case 25:return 88
break;
case 26:return 90
break;
case 27:return 191
break;
case 28:return 106
break;
case 29:return 315
break;
case 30:return 139
break;
case 31:return 316
break;
case 32:return 317
break;
case 33:return 116
break;
case 34:return 318
break;
case 35:return 115
break;
case 36:return 319
break;
case 37:return 320
break;
case 38:return 119
break;
case 39:return 121
break;
case 40:return 122
break;
case 41:return 137
break;
case 42:return 131
break;
case 43:return 132
break;
case 44:return 134
break;
case 45:return 140
break;
case 46:return 118
break;
case 47:return 321
break;
case 48:return 322
break;
case 49:return 166
break;
case 50:return 169
break;
case 51:return 173
break;
case 52:return 99
break;
case 53:return 167
break;
case 54:return 323
break;
case 55:return 172
break;
case 56:return 230
break;
case 57:return 233
break;
case 58:return 272
break;
case 59:return 195
break;
case 60:return 324
break;
case 61:return 325
break;
case 62:return 222
break;
case 63:return 327
break;
case 64:return 328
break;
case 65:return 217
break;
case 66:return 224
break;
case 67:return 225
break;
case 68:return 244
break;
case 69:return 248
break;
case 70:return 289
break;
case 71:return 329
break;
case 72:return 330
break;
case 73:return 331
break;
case 74:return 332
break;
case 75:return 333
break;
case 76:return 252
break;
case 77:return 334
break;
case 78:return 267
break;
case 79:return 275
break;
case 80:return 276
break;
case 81:return 269
break;
case 82:return 270
break;
case 83:return 271
break;
case 84:return 335
break;
case 85:return 336
break;
case 86:return 273
break;
case 87:return 338
break;
case 88:return 337
break;
case 89:return 339
break;
case 90:return 278
break;
case 91:return 279
break;
case 92:return 282
break;
case 93:return 284
break;
case 94:return 288
break;
case 95:return 292
break;
case 96:return 295
break;
case 97:return 13
break;
case 98:return 16
break;
case 99:return 306
break;
case 100:return 239
break;
case 101:return 34
break;
case 102:return 291
break;
case 103:return 87
break;
case 104:return 293
break;
case 105:return 294
break;
case 106:return 300
break;
case 107:return 301
break;
case 108:return 302
break;
case 109:return 303
break;
case 110:return 304
break;
case 111:return 305
break;
case 112:return 'EXPONENT'
break;
case 113:return 296
break;
case 114:return 297
break;
case 115:return 298
break;
case 116:return 299
break;
case 117:return 93
break;
case 118:return 240
break;
case 119:return 6
break;
case 120:return 'INVALID'
break;
case 121:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+|#[^\n\r]*)/i,/^(?:BASE)/i,/^(?:PREFIX)/i,/^(?:SELECT)/i,/^(?:DISTINCT)/i,/^(?:REDUCED)/i,/^(?:\()/i,/^(?:AS)/i,/^(?:\))/i,/^(?:\*)/i,/^(?:CONSTRUCT)/i,/^(?:WHERE)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:DESCRIBE)/i,/^(?:ASK)/i,/^(?:FROM)/i,/^(?:NAMED)/i,/^(?:GROUP)/i,/^(?:BY)/i,/^(?:HAVING)/i,/^(?:ORDER)/i,/^(?:ASC)/i,/^(?:DESC)/i,/^(?:LIMIT)/i,/^(?:OFFSET)/i,/^(?:VALUES)/i,/^(?:;)/i,/^(?:LOAD)/i,/^(?:SILENT)/i,/^(?:INTO)/i,/^(?:CLEAR)/i,/^(?:DROP)/i,/^(?:CREATE)/i,/^(?:ADD)/i,/^(?:TO)/i,/^(?:MOVE)/i,/^(?:COPY)/i,/^(?:INSERT\s+DATA)/i,/^(?:DELETE\s+DATA)/i,/^(?:DELETE\s+WHERE)/i,/^(?:WITH)/i,/^(?:DELETE)/i,/^(?:INSERT)/i,/^(?:USING)/i,/^(?:DEFAULT)/i,/^(?:GRAPH)/i,/^(?:ALL)/i,/^(?:\.)/i,/^(?:OPTIONAL)/i,/^(?:SERVICE)/i,/^(?:BIND)/i,/^(?:UNDEF)/i,/^(?:MINUS)/i,/^(?:UNION)/i,/^(?:FILTER)/i,/^(?:<<)/i,/^(?:>>)/i,/^(?:,)/i,/^(?:a)/i,/^(?:\|)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:\?)/i,/^(?:\+)/i,/^(?:!)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:IN)/i,/^(?:NOT)/i,/^(?:-)/i,/^(?:BOUND)/i,/^(?:BNODE)/i,/^(?:(RAND|NOW|UUID|STRUUID))/i,/^(?:(LANG|DATATYPE|IRI|URI|ABS|CEIL|FLOOR|ROUND|STRLEN|STR|UCASE|LCASE|ENCODE_FOR_URI|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|MD5|SHA1|SHA256|SHA384|SHA512|isIRI|isURI|isBLANK|isLITERAL|isNUMERIC))/i,/^(?:(LANGMATCHES|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|STRLANG|STRDT|sameTerm))/i,/^(?:CONCAT)/i,/^(?:COALESCE)/i,/^(?:IF)/i,/^(?:REGEX)/i,/^(?:SUBSTR)/i,/^(?:REPLACE)/i,/^(?:EXISTS)/i,/^(?:COUNT)/i,/^(?:SUM|MIN|MAX|AVG|SAMPLE)/i,/^(?:GROUP_CONCAT)/i,/^(?:SEPARATOR)/i,/^(?:\^\^)/i,/^(?:true|false)/i,/^(?:(<([^<>\"\{\}\|\^`\\\u0000-\u0020])*>))/i,/^(?:((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.)*(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040]))?)?:))/i,/^(?:(((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.)*(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040]))?)?:)((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/i,/^(?:(_:(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.)*(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040]))?))/i,/^(?:([\?\$]((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])*)))/i,/^(?:(@[a-zA-Z]+(-[a-zA-Z0-9]+)*))/i,/^(?:([0-9]+))/i,/^(?:([0-9]*\.[0-9]+))/i,/^(?:([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+)))/i,/^(?:(\+([0-9]+)))/i,/^(?:(\+([0-9]*\.[0-9]+)))/i,/^(?:(\+([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i,/^(?:(-([0-9]+)))/i,/^(?:(-([0-9]*\.[0-9]+)))/i,/^(?:(-([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i,/^(?:([eE][+-]?[0-9]+))/i,/^(?:('(([^\u0027\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/i,/^(?:("(([^\u0022\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/i,/^(?:('''(('|'')?([^'\\]|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/i,/^(?:("""(("|"")?([^\"\\]|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/i,/^(?:(\((\u0020|\u0009|\u000D|\u000A)*\)))/i,/^(?:(\[(\u0020|\u0009|\u000D|\u000A)*\]))/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = SparqlParser;
exports.Parser = SparqlParser.Parser;
exports.parse = function () { return SparqlParser.parse.apply(SparqlParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}